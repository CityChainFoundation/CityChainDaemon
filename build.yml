# City Chain - Continuous Integration Setup for Azure DevOps

parameters:
  name: ''
  queue: ''
  platform: ''
  reason: '$(Build.Reason)'
  arch: 'x64' # Only overriden by 32-bit Windows
  configuration: 'Release' # Only do debug if specified

phases:
- phase: ${{ parameters.name }}
  displayName: ${{ format('City Chain ({0}-{1})', parameters.platform, parameters.arch) }}
  queue: ${{ parameters.queue }}
  steps:

  - powershell: |
      $version = (Get-Content package.json) -join "`n" | ConvertFrom-Json | Select -ExpandProperty "version"
      Write-Host "##vso[task.setvariable variable=Build.BuildNumber]$version"
      Write-Host "##vso[task.setvariable variable=App.BuildNumber]$version" 
      Write-Host "BUILD_REASON: $Env:BUILD_REASON"
      Write-Host "BUILD_SOURCEBRANCH: $Env:BUILD_SOURCEBRANCH"
      Write-Host "BUILD_SOURCEBRANCHNAME: $Env:BUILD_SOURCEBRANCHNAME"
      Write-Host "SYSTEM_PULLREQUEST_PULLREQUESTID: $Env:SYSTEM_PULLREQUEST_PULLREQUESTID"
      Write-Host "SYSTEM_PULLREQUEST_PULLREQUESTNUMBER: $Env:SYSTEM_PULLREQUEST_PULLREQUESTNUMBER"
      Write-Host "SYSTEM_PULLREQUEST_SOURCEBRANCH: $Env:SYSTEM_PULLREQUEST_SOURCEBRANCH"
    displayName: version number

  - task: DotNetCoreCLI@2
    displayName: dotnet publish
    inputs:
      command: publish
      projects: '**/City.Chain.csproj'
      workingDirectory: 'src/City.Chain'
      publishWebProjects: false
      zipAfterPublish: false
      modifyOutputPath: false
      arguments: ${{ format('-c {0} -r {1}-{2} -v m', parameters.configuration, parameters.platform, parameters.arch) }}


  # Run all unit tests, by applying the "*.Tests.csproj" filter it should avoid IntegrationTests projects.
  # Only run tests on Linux.
  - task: DotNetCoreCLI@2
    displayName: dotnet test
    #condition: and(succeeded(), eq(variables['parameters.platform'], 'linux')) # Unable to get condition to work.
    inputs:
      command: test
      ${{ if eq(parameters.reason, 'Schedule') }}:
        projects: '**/*.Tests.csproj'
      ${{ if ne(parameters.reason, 'Schedule') }}:
        projects: '**/City.*.Tests.csproj'
      arguments: ${{ format('-c {0} -v m', parameters.configuration) }}

  - powershell: |
      $configuration="release"
      $runtime="win-x64"
      $git_commit=(git log --format=%h --abbrev=7 -n 1)
      $publish_directory="..\src\Stratis.StratisD\bin\$configuration\netcoreapp2.1\$runtime\publish"
      $download_directory=$env:temp
      $warp="$download_directory\windows-x64.warp-packer.exe"
      $project_path="..\src\Stratis.StratisD\Stratis.StratisD.csproj"

      Write-Host "Download directory is $download_directory" -foregroundcolor "Magenta"
      Write-Host "Current directory is $PWD" -foregroundcolor "Magenta"
      Write-Host "Git commit to build: $git_commit" -foregroundcolor "Magenta"

      Write-Host "Downloading warp..." -foregroundcolor "Magenta"
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-WebRequest https://github.com/stratisproject/warp/releases/download/v0.2.1/windows-x64.warp-packer.exe -O $download_directory\windows-x64.warp-packer.exe

      If(Get-ChildItem $warp)
      {
          Write-Host "Warp downloaded succesfully." -foregroundcolor "Magenta"

          $size=((Get-Item "$warp").Length)
          Write-Host "Size is $size" -foregroundcolor "Magenta"
      }

      Write-Host "Building the full node..." -foregroundcolor "Magenta"
      dotnet --info
      dotnet publish $project_path -c $configuration -v m -r $runtime 

      Write-Host "List of files to package:" -foregroundcolor "Magenta"
      Get-ChildItem -Path $publish_directory

      Write-Host "Packaging the daemon..." -foregroundcolor "Magenta"
      & $warp --arch windows-x64 --input_dir $publish_directory --exec Stratis.StratisD.exe --output $publish_directory\Stratis-$git_commit.exe

      Write-Host "Done." -foregroundcolor "green"
    displayName: package

#  - powershell: ./Scripts/package.ps1 -filename 'City.Chain.exe' -output 'City.Chain-wrapped.exe' -runtime 'win-x64' -arch 'windows-x64' -warp 'windows-x64.warp-packer.exe'

  # - task: PowerShell@2
  #   displayName: package daemon
  #   inputs:
  #     targetType: 'filePath'
  #     filePath: 'Scripts/package.ps1'
  #   env:
  #     ${{ if eq(parameters.platform, 'linux') }}:
  #       filename: 'City.Chain'
  #       output: 'City.Chain-wrapped'
  #       runtime: 'linux-x64'
  #       arch: 'linux-x64'
  #       warp: 'linux-x64.warp-packer'
  #     ${{ if eq(parameters.platform, 'osx') }}:
  #       filename: 'City.Chain'
  #       output: 'City.Chain-wrapped'
  #       runtime: 'macos-x64'
  #       arch: 'linux-x64'
  #       warp: 'macos-x64.warp-packer'
  #     ${{ if eq(parameters.platform, 'win') }}:
  #       filename: 'City.Chain.exe'
  #       output: 'City.Chain-wrapped.exe'
  #       runtime: 'win-x64'
  #       arch: 'windows-x64'
  #       warp: 'windows-x64.warp-packer.exe'

  - task: ArchiveFiles@2
    displayName: archive
    inputs:
      rootFolderOrFile: ${{ format('src/City.Chain/bin/{0}/netcoreapp2.1/{1}-{2}/publish/', parameters.configuration, parameters.platform, parameters.arch) }}
      includeRootFolder: false

      ${{ if eq(parameters.platform, 'linux') }}:
        archiveFile: ${{ format('$(Build.ArtifactStagingDirectory)/City.Chain-$(App.BuildNumber)-{0}-{1}.tar.gz', parameters.platform, parameters.arch) }}
        archiveType: tar
      ${{ if ne(parameters.platform, 'linux') }}:
        archiveFile: ${{ format('$(Build.ArtifactStagingDirectory)/City.Chain-$(App.BuildNumber)-{0}-{1}.zip', parameters.platform, parameters.arch) }}  

  - task: marcelo-formentao.github-tools.github-release-publish-task.GitHubReleasePublish@0
    displayName: github release
    condition: and(succeeded(), eq(variables['build.sourcebranch'], 'refs/heads/master'))
    inputs:
      githubEndpoint: github
      githubRepository: 'CityChainFoundation/city-chain'
      githubReleaseTitle: 'City Chain (Release $(Build.BuildNumber))'
      githubReleasePrerelease: true
      githubReleaseAsset: '$(Build.ArtifactStagingDirectory)/City.Chain*.*'
      manifestJson: package.json
      githubEditRelease: true
