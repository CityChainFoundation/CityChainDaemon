#  reference: https://www.appveyor.com/docs/appveyor-yml/

# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

version: 1.4.0.{build}
pull_requests:
  do_not_increment_build_number: false
skip_tags: true


# branches to build 
branches:
  # whitelist
  only:
    - master

#---------------------------------#
#    environment configuration    #
#---------------------------------#

environment:
  github_access_token:
    secure: 5jC9tX1KFkTKayJB2ifWK1hru/gDPcEn/pyws8824r8GVVrV9sriQ3xJ1BG5dYRN
  github_email:
    secure: G83oRB/p3ii9we5e5CI7eZV17+GMbAJL2wbZ3pZGpTk=

image: Visual Studio 2017

clone_depth: 1
clone_folder: c:\projects\fullnode

install:
  - cinst docfx

configuration:
- Debug
#- Release

# build cache to preserve files/folders between builds
cache:
  - '%USERPROFILE%\.nuget\packages'
  
init:
- ps: dotnet --info

build: off

#---------------------------------#
#       build configuration       #
#---------------------------------#
# build_script:
# - ps: |
#       cd src
#       Write-Host "[$env:configuration] STARTED dotnet build" -foregroundcolor "magenta"
#       dotnet build -c $env:configuration -v m 
#       Write-Host "[$env:configuration] FINISHED dotnet build" -foregroundcolor "magenta"
#       if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }

# scripts to run after build
# after_build:
# - ps: |
#       if($env:configuration -eq 'Release')
#       {
#         Write-Host "[$env:configuration] STARTED dotnet pack" -foregroundcolor "magenta"
        
#         cd Stratis.Bitcoin
#         dotnet pack -c $env:configuration -v m --no-build -o $env:APPVEYOR_BUILD_FOLDER\nuget\
        
#         cd ../Stratis.Bitcoin.Api
#         dotnet pack -c $env:configuration -v m --no-build -o $env:APPVEYOR_BUILD_FOLDER\nuget\

#         cd ../Stratis.Bitcoin.Features.LightWallet
#         dotnet pack -c $env:configuration -v m --no-build -o $env:APPVEYOR_BUILD_FOLDER\nuget\
        
#         Write-Host "[$env:configuration] FINISHED dotnet pack" -foregroundcolor "magenta"
#       }

#       if ($LastExitCode -ne 0) { $host.SetShouldExit($LastExitCode)  }
    
# test_script:
# - ps: |
#       Write-Host "[$env:configuration] STARTED dotnet test" -foregroundcolor "magenta"
#       cd $env:APPVEYOR_BUILD_FOLDER/src
      
#       $anyFailures = $FALSE;
      
#       foreach ($testFolder in ls *.Tests) {

#             # exclude integration tests
#             if ($testFolder -like '*Integration.Tests*' -Or $testFolder -like '*IntegrationTests*' -Or $testFolder -like '*NBitcoin.Tests*') { continue }
            
#             Push-Location $testFolder

#             Write-Host "[$env:configuration] Running tests in $testFolder" -foregroundcolor "magenta"
#             dotnet test -c $env:configuration --no-build
            
#             if ($LastExitCode -ne 0) { 
#                 $anyFailures = $TRUE
#                 Add-AppveyorMessage -Message "Some tests failed in $testFolder."
#             }
    
#             Pop-Location
#       }  

#       Write-Host "[$env:configuration] FINISHED dotnet test" -foregroundcolor "magenta"
#       if ($anyFailures -eq $TRUE) { $host.SetShouldExit(1) }

#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

# pushing all files in build directory recursively
#artifacts:
#- path: nuget\*.nupkg
#  name: nuget packages

deploy_script:
- git config --global credential.helper store
- ps: Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:github_access_token):x-oauth-basic@github.com`n"
- git config --global user.email %github_email%
- git config --global user.name "sondreb"
- bash releaseDocs.sh

on_success:
  - ps: Invoke-RestMethod https://raw.githubusercontent.com/k3rn31p4nic/appveyor-discord-webhook/master/send.ps1 -o send.ps1
  - ps: ./send.ps1 success $env:WEBHOOK_URL
on_failure:
  - ps: Invoke-RestMethod https://raw.githubusercontent.com/k3rn31p4nic/appveyor-discord-webhook/master/send.ps1 -o send.ps1
  - ps: ./send.ps1 failure $env:WEBHOOK_URL
