name: Build

on: 
  push:
    branches:
      - feature/*

jobs:
  
  buildTestRelease:

    strategy:
      matrix:
        os: [ windows-latest, ubuntu-latest, macos-latest ]
        node_version: [12.x]
        dotnet_version: ['2.1.607']
      fail-fast: false

    runs-on: ${{ matrix.os }}
    
    env:
      SOLUTION_PATH: 'src/City.Chain.sln'
      PROJECT_PATH: 'src/City.Chain/City.Chain.csproj'
      BUILD_CONFIGURATION: 'Release'

    steps:

    - uses: actions/checkout@v1
      name: Checkout

    - name: Setup Node.js (${{ matrix.node_version }})
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node_version }}

    - name: Version
      id: setversion
      run: |
        echo "::set-env name=VERSION::$(npm run version --silent)"


    # TODO: Improve this, doesn't need to be separate steps, can be simpliefied, did not have time bother learning that as well at this moment in human history.
    - name: Configuration
      if: matrix.os == 'windows-latest'
      run: echo "::set-env name=RELEASE_CONFIGURATION::win-x64"

    - name: Configuration
      if: matrix.os == 'ubuntu-latest'
      run: echo "::set-env name=RELEASE_CONFIGURATION::linux-x64"

    - name: Configuration
      if: matrix.os == 'macos-latest'
      run: echo "::set-env name=RELEASE_CONFIGURATION::osx-x64"


    - name: Setup .NET Core (${{ matrix.dotnet_version }})
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet_version }}

    - name: Restore
      run: dotnet restore ${{env.SOLUTION_PATH}}

    - name: Build
      run: dotnet build -c ${{env.BUILD_CONFIGURATION}} -r ${{env.RELEASE_CONFIGURATION}} -v m ${{env.SOLUTION_PATH}}

    - name: Publish
      run: dotnet publish -c ${{env.BUILD_CONFIGURATION}} -r ${{env.RELEASE_CONFIGURATION}} -v m -o ./bin/publish ${{env.PROJECT_PATH}}

    - name: Package (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        zip -r release.zip ./src/City.Chain/bin/publish/

    - name: Package (Win/Mac)
      if: matrix.os != 'ubuntu-latest'
      run: |
        zip -r release.zip ./src/City.Chain/bin/publish/

    - name: Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "release.zip"
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
        prerelease: true
        name: "City Chain (Release ${{env.VERSION}})"
        tag: v${{env.VERSION}}

# THE BUILT IN TASKS WILL CREATE NEW RELEASES ON EVERY EXECUTION... NOT USABLE.
    # - name: Release
    #   id: release
    #   uses: actions/create-release@v1.0.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     tag_name: v${{env.VERSION}}
    #     release_name: City Chain (Release ${{env.VERSION}})
    #     draft: true
    #     prerelease: true

    # - name: Upload
    #   id: upload
    #   uses: actions/upload-release-asset@v1.0.1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
    #     asset_path: ./release.zip
    #     asset_name: release.zip
    #     asset_content_type: application/zip

#    - name: Unit Test
#      run: dotnet test -v=normal --no-build --filter FullyQualifiedName!~IntegrationTests --configuration ${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_PATH}}


# CANNOT BE USED - CREATE NEW RELEASE ON EVERY BUILD
    # - uses: "marvinpinto/action-automatic-releases@latest"
    #   name: "Release"
    #   with:
    #     repo_token: "${{ secrets.GITHUB_TOKEN }}"
    #     automatic_release_tag: "v${{env.VERSION}}"
    #     prerelease: true
    #     draft: true
    #     title: "City Chain (Release ${{env.VERSION}})"
    #     files: |
    #       LICENSE
    #       package.json
    #       release.zip



# UNUSABLE RELEASE ACTIONS:
# - Can't do updates to draft:
# marvinpinto/action-automatic-releases@latest
# actions/create-release@v1.0.0
# actions/upload-release-asset@v1.0.1
# softprops/action-gh-release@v1